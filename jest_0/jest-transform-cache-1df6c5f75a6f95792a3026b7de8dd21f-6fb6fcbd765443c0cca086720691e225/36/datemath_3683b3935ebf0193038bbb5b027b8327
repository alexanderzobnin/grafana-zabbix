d82838b2ee0e951a72e422d7fdb6a725
'use strict';Object.defineProperty(exports, "__esModule", { value: true });exports.




parse = parse;exports.
































isValid = isValid;exports.












parseDateMath = parseDateMath;var _lodash = require('lodash');var _lodash2 = _interopRequireDefault(_lodash);var _moment = require('moment');var _moment2 = _interopRequireDefault(_moment);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}var units = ['y', 'M', 'w', 'd', 'h', 'm', 's'];function parse(text, roundUp) {if (!text) {return undefined;}if (_moment2.default.isMoment(text)) {return text;}if (_lodash2.default.isDate(text)) {return (0, _moment2.default)(text);}var time;var mathString = '';var index;var parseString;if (text.substring(0, 3) === 'now') {time = (0, _moment2.default)();mathString = text.substring('now'.length);} else {index = text.indexOf('||');if (index === -1) {parseString = text;mathString = ''; // nothing else
    } else {parseString = text.substring(0, index);mathString = text.substring(index + 2);} // We're going to just require ISO8601 timestamps, k?
    time = (0, _moment2.default)(parseString, _moment2.default.ISO_8601);}if (!mathString.length) {return time;}return parseDateMath(mathString, time, roundUp);}function isValid(text) {var date = parse(text);if (!date) {return false;}if (_moment2.default.isMoment(date)) {return date.isValid();}return false;}function parseDateMath(mathString, time, roundUp) {var dateTime = time;var i = 0;
  var len = mathString.length;

  while (i < len) {
    var c = mathString.charAt(i++);
    var type;
    var num;
    var unit;

    if (c === '/') {
      type = 0;
    } else if (c === '+') {
      type = 1;
    } else if (c === '-') {
      type = 2;
    } else {
      return undefined;
    }

    if (isNaN(mathString.charAt(i))) {
      num = 1;
    } else if (mathString.length === 2) {
      num = mathString.charAt(i);
    } else {
      var numFrom = i;
      while (!isNaN(mathString.charAt(i))) {
        i++;
        if (i > 10) {return undefined;}
      }
      num = parseInt(mathString.substring(numFrom, i), 10);
    }

    if (type === 0) {
      // rounding is only allowed on whole, single, units (eg M or 1M, not 0.5M or 2M)
      if (num !== 1) {
        return undefined;
      }
    }
    unit = mathString.charAt(i++);

    if (!_lodash2.default.includes(units, unit)) {
      return undefined;
    } else {
      if (type === 0) {
        if (roundUp) {
          dateTime.endOf(unit);
        } else {
          dateTime.startOf(unit);
        }
      } else if (type === 1) {
        dateTime.add(num, unit);
      } else if (type === 2) {
        dateTime.subtract(num, unit);
      }
    }
  }
  return dateTime;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRhdGVtYXRoLmpzIl0sIm5hbWVzIjpbInBhcnNlIiwiaXNWYWxpZCIsInBhcnNlRGF0ZU1hdGgiLCJ1bml0cyIsInRleHQiLCJyb3VuZFVwIiwidW5kZWZpbmVkIiwibW9tZW50IiwiaXNNb21lbnQiLCJfIiwiaXNEYXRlIiwidGltZSIsIm1hdGhTdHJpbmciLCJpbmRleCIsInBhcnNlU3RyaW5nIiwic3Vic3RyaW5nIiwibGVuZ3RoIiwiaW5kZXhPZiIsIklTT184NjAxIiwiZGF0ZSIsImRhdGVUaW1lIiwiaSIsImxlbiIsImMiLCJjaGFyQXQiLCJ0eXBlIiwibnVtIiwidW5pdCIsImlzTmFOIiwibnVtRnJvbSIsInBhcnNlSW50IiwiaW5jbHVkZXMiLCJlbmRPZiIsInN0YXJ0T2YiLCJhZGQiLCJzdWJ0cmFjdCJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFLZ0JBLEssR0FBQUEsSzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBaUNBQyxPLEdBQUFBLE87Ozs7Ozs7Ozs7Ozs7QUFhQUMsYSxHQUFBQSxhLENBbkRoQixnQywrQ0FDQSxnQyw0SUFFQSxJQUFJQyxRQUFRLENBQUMsR0FBRCxFQUFNLEdBQU4sRUFBVyxHQUFYLEVBQWdCLEdBQWhCLEVBQXFCLEdBQXJCLEVBQTBCLEdBQTFCLEVBQStCLEdBQS9CLENBQVosQ0FFTyxTQUFTSCxLQUFULENBQWVJLElBQWYsRUFBcUJDLE9BQXJCLEVBQThCLENBQ25DLElBQUksQ0FBQ0QsSUFBTCxFQUFXLENBQUUsT0FBT0UsU0FBUCxDQUFtQixDQUNoQyxJQUFJQyxpQkFBT0MsUUFBUCxDQUFnQkosSUFBaEIsQ0FBSixFQUEyQixDQUFFLE9BQU9BLElBQVAsQ0FBYyxDQUMzQyxJQUFJSyxpQkFBRUMsTUFBRixDQUFTTixJQUFULENBQUosRUFBb0IsQ0FBRSxPQUFPLHNCQUFPQSxJQUFQLENBQVAsQ0FBc0IsQ0FFNUMsSUFBSU8sSUFBSixDQUNBLElBQUlDLGFBQWEsRUFBakIsQ0FDQSxJQUFJQyxLQUFK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QVc1QixLQUFYLEVBQWtCd0IsSUFBbEIsQ0FBTCxFQUE4QjtBQUM1QixhQUFPckIsU0FBUDtBQUNELEtBRkQsTUFFTztBQUNMLFVBQUltQixTQUFTLENBQWIsRUFBZ0I7QUFDZCxZQUFJcEIsT0FBSixFQUFhO0FBQ1hlLG1CQUFTWSxLQUFULENBQWVMLElBQWY7QUFDRCxTQUZELE1BRU87QUFDTFAsbUJBQVNhLE9BQVQsQ0FBaUJOLElBQWpCO0FBQ0Q7QUFDRixPQU5ELE1BTU8sSUFBSUYsU0FBUyxDQUFiLEVBQWdCO0FBQ3JCTCxpQkFBU2MsR0FBVCxDQUFhUixHQUFiLEVBQWtCQyxJQUFsQjtBQUNELE9BRk0sTUFFQSxJQUFJRixTQUFTLENBQWIsRUFBZ0I7QUFDckJMLGlCQUFTZSxRQUFULENBQWtCVCxHQUFsQixFQUF1QkMsSUFBdkI7QUFDRDtBQUNGO0FBQ0Y7QUFDRCxTQUFPUCxRQUFQO0FBQ0QiLCJmaWxlIjoiZGF0ZW1hdGguanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IG1vbWVudCBmcm9tICdtb21lbnQnO1xuXG52YXIgdW5pdHMgPSBbJ3knLCAnTScsICd3JywgJ2QnLCAnaCcsICdtJywgJ3MnXTtcblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlKHRleHQsIHJvdW5kVXApIHtcbiAgaWYgKCF0ZXh0KSB7IHJldHVybiB1bmRlZmluZWQ7IH1cbiAgaWYgKG1vbWVudC5pc01vbWVudCh0ZXh0KSkgeyByZXR1cm4gdGV4dDsgfVxuICBpZiAoXy5pc0RhdGUodGV4dCkpIHsgcmV0dXJuIG1vbWVudCh0ZXh0KTsgfVxuXG4gIHZhciB0aW1lO1xuICB2YXIgbWF0aFN0cmluZyA9ICcnO1xuICB2YXIgaW5kZXg7XG4gIHZhciBwYXJzZVN0cmluZztcblxuICBpZiAodGV4dC5zdWJzdHJpbmcoMCwgMykgPT09ICdub3cnKSB7XG4gICAgdGltZSA9IG1vbWVudCgpO1xuICAgIG1hdGhTdHJpbmcgPSB0ZXh0LnN1YnN0cmluZygnbm93Jy5sZW5ndGgpO1xuICB9IGVsc2Uge1xuICAgIGluZGV4ID0gdGV4dC5pbmRleE9mKCd8fCcpO1xuICAgIGlmIChpbmRleCA9PT0gLTEpIHtcbiAgICAgIHBhcnNlU3RyaW5nID0gdGV4dDtcbiAgICAgIG1hdGhTdHJpbmcgPSAnJzsgLy8gbm90aGluZyBlbHNlXG4gICAgfSBlbHNlIHtcbiAgICAgIHBhcnNlU3RyaW5nID0gdGV4dC5zdWJzdHJpbmcoMCwgaW5kZXgpO1xuICAgICAgbWF0aFN0cmluZyA9IHRleHQuc3Vic3RyaW5nKGluZGV4ICsgMik7XG4gICAgfVxuICAgIC8vIFdlJ3JlIGdvaW5nIHRvIGp1c3QgcmVxdWlyZSBJU084NjAxIHRpbWVzdGFtcHMsIGs/XG4gICAgdGltZSA9IG1vbWVudChwYXJzZVN0cmluZywgbW9tZW50LklTT184NjAxKTtcbiAgfVxuXG4gIGlmICghbWF0aFN0cmluZy5sZW5ndGgpIHtcbiAgICByZXR1cm4gdGltZTtcbiAgfVxuXG4gIHJldHVybiBwYXJzZURhdGVNYXRoKG1hdGhTdHJpbmcsIHRpbWUsIHJvdW5kVXApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNWYWxpZCh0ZXh0KSB7XG4gIHZhciBkYXRlID0gcGFyc2UodGV4dCk7XG4gIGlmICghZGF0ZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmIChtb21lbnQuaXNNb21lbnQoZGF0ZSkpIHtcbiAgICByZXR1cm4gZGF0ZS5pc1ZhbGlkKCk7XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZURhdGVNYXRoKG1hdGhTdHJpbmcsIHRpbWUsIHJvdW5kVXApIHtcbiAgdmFyIGRhdGVUaW1lID0gdGltZTtcbiAgdmFyIGkgPSAwO1xuICB2YXIgbGVuID0gbWF0aFN0cmluZy5sZW5ndGg7XG5cbiAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICB2YXIgYyA9IG1hdGhTdHJpbmcuY2hhckF0KGkrKyk7XG4gICAgdmFyIHR5cGU7XG4gICAgdmFyIG51bTtcbiAgICB2YXIgdW5pdDtcblxuICAgIGlmIChjID09PSAnLycpIHtcbiAgICAgIHR5cGUgPSAwO1xuICAgIH0gZWxzZSBpZiAoYyA9PT0gJysnKSB7XG4gICAgICB0eXBlID0gMTtcbiAgICB9IGVsc2UgaWYgKGMgPT09ICctJykge1xuICAgICAgdHlwZSA9IDI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgaWYgKGlzTmFOKG1hdGhTdHJpbmcuY2hhckF0KGkpKSkge1xuICAgICAgbnVtID0gMTtcbiAgICB9IGVsc2UgaWYgKG1hdGhTdHJpbmcubGVuZ3RoID09PSAyKSB7XG4gICAgICBudW0gPSBtYXRoU3RyaW5nLmNoYXJBdChpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIG51bUZyb20gPSBpO1xuICAgICAgd2hpbGUgKCFpc05hTihtYXRoU3RyaW5nLmNoYXJBdChpKSkpIHtcbiAgICAgICAgaSsrO1xuICAgICAgICBpZiAoaSA+IDEwKSB7IHJldHVybiB1bmRlZmluZWQ7IH1cbiAgICAgIH1cbiAgICAgIG51bSA9IHBhcnNlSW50KG1hdGhTdHJpbmcuc3Vic3RyaW5nKG51bUZyb20sIGkpLCAxMCk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGUgPT09IDApIHtcbiAgICAgIC8vIHJvdW5kaW5nIGlzIG9ubHkgYWxsb3dlZCBvbiB3aG9sZSwgc2luZ2xlLCB1bml0cyAoZWcgTSBvciAxTSwgbm90IDAuNU0gb3IgMk0pXG4gICAgICBpZiAobnVtICE9PSAxKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgfVxuICAgIHVuaXQgPSBtYXRoU3RyaW5nLmNoYXJBdChpKyspO1xuXG4gICAgaWYgKCFfLmluY2x1ZGVzKHVuaXRzLCB1bml0KSkge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHR5cGUgPT09IDApIHtcbiAgICAgICAgaWYgKHJvdW5kVXApIHtcbiAgICAgICAgICBkYXRlVGltZS5lbmRPZih1bml0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkYXRlVGltZS5zdGFydE9mKHVuaXQpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHR5cGUgPT09IDEpIHtcbiAgICAgICAgZGF0ZVRpbWUuYWRkKG51bSwgdW5pdCk7XG4gICAgICB9IGVsc2UgaWYgKHR5cGUgPT09IDIpIHtcbiAgICAgICAgZGF0ZVRpbWUuc3VidHJhY3QobnVtLCB1bml0KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIGRhdGVUaW1lO1xufVxuIl19