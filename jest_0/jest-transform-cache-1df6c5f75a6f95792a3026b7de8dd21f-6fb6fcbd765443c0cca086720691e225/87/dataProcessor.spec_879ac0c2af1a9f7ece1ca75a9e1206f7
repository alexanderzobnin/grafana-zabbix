f6ea4a6d6dbd5ae068b81e269867a5f0
'use strict';var _lodash = require('lodash');var _lodash2 = _interopRequireDefault(_lodash);
var _dataProcessor = require('../dataProcessor');var _dataProcessor2 = _interopRequireDefault(_dataProcessor);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

describe('dataProcessor', function () {
  var ctx = {};

  beforeEach(function () {
    ctx.datapoints = [
    [[10, 1500000000000], [2, 1500000001000], [7, 1500000002000], [1, 1500000003000]],
    [[9, 1500000000000], [3, 1500000001000], [4, 1500000002000], [8, 1500000003000]]];

  });

  describe('When apply groupBy() functions', function () {
    it('should return series average', function () {
      var aggregateBy = _dataProcessor2.default.metricFunctions['groupBy'];
      var avg2s = _lodash2.default.map(ctx.datapoints, function (dp) {return aggregateBy('2s', 'avg', dp);});
      expect(avg2s).toEqual([
      [[6, 1500000000000], [4, 1500000002000]],
      [[6, 1500000000000], [6, 1500000002000]]]);


      var avg10s = _lodash2.default.map(ctx.datapoints, function (dp) {return aggregateBy('10s', 'avg', dp);});
      expect(avg10s).toEqual([
      [[5, 1500000000000]],
      [[6, 1500000000000]]]);


      // not aligned
      var dp = [[10, 1500000001000], [2, 1500000002000], [7, 1500000003000], [1, 1500000004000]];
      expect(aggregateBy('2s', 'avg', dp)).toEqual([
      [10, 1500000000000], [4.5, 1500000002000], [1, 1500000004000]]);

    });
  });

  describe('When apply aggregateBy() functions', function () {
    it('should return series average', function () {
      var aggregateBy = _dataProcessor2.default.metricFunctions['aggregateBy'];
      var avg1s = aggregateBy('1s', 'avg', ctx.datapoints);
      expect(avg1s).toEqual([
      [9.5, 1500000000000], [2.5, 1500000001000], [5.5, 1500000002000], [4.5, 1500000003000]]);


      var avg10s = aggregateBy('10s', 'avg', ctx.datapoints);
      expect(avg10s).toEqual([
      [5.5, 1500000000000]]);

    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRhdGFQcm9jZXNzb3Iuc3BlYy5qcyJdLCJuYW1lcyI6WyJkZXNjcmliZSIsImN0eCIsImJlZm9yZUVhY2giLCJkYXRhcG9pbnRzIiwiaXQiLCJhZ2dyZWdhdGVCeSIsImRhdGFQcm9jZXNzb3IiLCJtZXRyaWNGdW5jdGlvbnMiLCJhdmcycyIsIl8iLCJtYXAiLCJkcCIsImV4cGVjdCIsInRvRXF1YWwiLCJhdmcxMHMiLCJhdmcxcyJdLCJtYXBwaW5ncyI6ImFBQUEsZ0M7QUFDQSxpRDs7QUFFQUEsU0FBUyxlQUFULEVBQTBCLFlBQU07QUFDOUIsTUFBSUMsTUFBTSxFQUFWOztBQUVBQyxhQUFXLFlBQU07QUFDZkQsUUFBSUUsVUFBSixHQUFpQjtBQUNmLEtBQUMsQ0FBQyxFQUFELEVBQUssYUFBTCxDQUFELEVBQXNCLENBQUMsQ0FBRCxFQUFJLGFBQUosQ0FBdEIsRUFBMEMsQ0FBQyxDQUFELEVBQUksYUFBSixDQUExQyxFQUE4RCxDQUFDLENBQUQsRUFBSSxhQUFKLENBQTlELENBRGU7QUFFZixLQUFDLENBQUMsQ0FBRCxFQUFJLGFBQUosQ0FBRCxFQUFzQixDQUFDLENBQUQsRUFBSSxhQUFKLENBQXRCLEVBQTBDLENBQUMsQ0FBRCxFQUFJLGFBQUosQ0FBMUMsRUFBOEQsQ0FBQyxDQUFELEVBQUksYUFBSixDQUE5RCxDQUZlLENBQWpCOztBQUlELEdBTEQ7O0FBT0FILFdBQVMsZ0NBQVQsRUFBMkMsWUFBTTtBQUMvQ0ksT0FBRyw4QkFBSCxFQUFtQyxZQUFNO0FBQ3ZDLFVBQUlDLGNBQWNDLHdCQUFjQyxlQUFkLENBQThCLFNBQTlCLENBQWxCO0FBQ0EsVUFBTUMsUUFBUUMsaUJBQUVDLEdBQUYsQ0FBTVQsSUFBSUUsVUFBVixFQUFzQixVQUFDUSxFQUFELFVBQVFOLFlBQVksSUFBWixFQUFrQixLQUFsQixFQUF5Qk0sRUFBekIsQ0FBUixFQUF0QixDQUFkO0FBQ0FDLGFBQU9KLEtBQVAsRUFBY0ssT0FBZCxDQUFzQjtBQUNwQixPQUFDLENBQUMsQ0FBRCxFQUFJLGFBQUosQ0FBRCxFQUFxQixDQUFDLENBQUQsRUFBSSxhQUFKLENBQXJCLENBRG9CO0FBRXBCLE9BQUMsQ0FBQyxDQUFELEVBQUksYUFBSixDQUFELEVBQXFCLENBQUMsQ0FBRCxFQUFJLGFBQUosQ0FBckIsQ0FGb0IsQ0FBdEI7OztBQUtBLFVBQU1DLFNBQVNMLGlCQUFFQyxHQUFGLENBQU1ULElBQUlFLFVBQVYsRUFBc0IsVUFBQ1EsRUFBRCxVQUFRTixZQUFZLEtBQVosRUFBbUIsS0FBbkIsRUFBMEJNLEVBQTFCLENBQVIsRUFBdEIsQ0FBZjtBQUNBQyxhQUFPRSxNQUFQLEVBQWVELE9BQWYsQ0FBdUI7QUFDckIsT0FBQyxDQUFDLENBQUQsRUFBSSxhQUFKLENBQUQsQ0FEcUI7QUFFckIsT0FBQyxDQUFDLENBQUQsRUFBSSxhQUFKLENBQUQsQ0FGcUIsQ0FBdkI7OztBQUtBO0FBQ0EsVUFBTUYsS0FBSyxDQUFDLENBQUMsRUFBRCxFQUFLLGFBQUwsQ0FBRCxFQUFzQixDQUFDLENBQUQsRUFBSSxhQUFKLENBQXRCLEVBQTBDLENBQUMsQ0FBRCxFQUFJLGFBQUosQ0FBMUMsRUFBOEQsQ0FBQyxDQUFELEVBQUksYUFBSixDQUE5RCxDQUFYO0FBQ0FDLGFBQU9QLFlBQVksSUFBWixFQUFrQixLQUFsQixFQUF5Qk0sRUFBekIsQ0FBUCxFQUFxQ0UsT0FBckMsQ0FBNkM7QUFDM0MsT0FBQyxFQUFELEVBQUssYUFBTCxDQUQyQyxFQUN0QixDQUFDLEdBQUQsRUFBTSxhQUFOLENBRHNCLEVBQ0EsQ0FBQyxDQUFELEVBQUksYUFBSixDQURBLENBQTdDOztBQUdELEtBbkJEO0FBb0JELEdBckJEOztBQXVCQWIsV0FBUyxvQ0FBVCxFQUErQyxZQUFNO0FBQ25ESSxPQUFHLDhCQUFILEVBQW1DLFlBQU07QUFDdkMsVUFBSUMsY0FBY0Msd0JBQWNDLGVBQWQsQ0FBOEIsYUFBOUIsQ0FBbEI7QUFDQSxVQUFNUSxRQUFRVixZQUFZLElBQVosRUFBa0IsS0FBbEIsRUFBeUJKLElBQUlFLFVBQTdCLENBQWQ7QUFDQVMsYUFBT0csS0FBUCxFQUFjRixPQUFkLENBQXNCO0FBQ3BCLE9BQUMsR0FBRCxFQUFNLGFBQU4sQ0FEb0IsRUFDRSxDQUFDLEdBQUQsRUFBTSxhQUFOLENBREYsRUFDd0IsQ0FBQyxHQUFELEVBQU0sYUFBTixDQUR4QixFQUM4QyxDQUFDLEdBQUQsRUFBTSxhQUFOLENBRDlDLENBQXRCOzs7QUFJQSxVQUFNQyxTQUFTVCxZQUFZLEtBQVosRUFBbUIsS0FBbkIsRUFBMEJKLElBQUlFLFVBQTlCLENBQWY7QUFDQVMsYUFBT0UsTUFBUCxFQUFlRCxPQUFmLENBQXVCO0FBQ3JCLE9BQUMsR0FBRCxFQUFNLGFBQU4sQ0FEcUIsQ0FBdkI7O0FBR0QsS0FYRDtBQVlELEdBYkQ7QUFjRCxDQS9DRCIsImZpbGUiOiJkYXRhUHJvY2Vzc29yLnNwZWMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IGRhdGFQcm9jZXNzb3IgZnJvbSAnLi4vZGF0YVByb2Nlc3Nvcic7XG5cbmRlc2NyaWJlKCdkYXRhUHJvY2Vzc29yJywgKCkgPT4ge1xuICBsZXQgY3R4ID0ge307XG5cbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgY3R4LmRhdGFwb2ludHMgPSBbXG4gICAgICBbWzEwLCAxNTAwMDAwMDAwMDAwXSwgWzIsIDE1MDAwMDAwMDEwMDBdLCBbNywgMTUwMDAwMDAwMjAwMF0sIFsxLCAxNTAwMDAwMDAzMDAwXV0sXG4gICAgICBbWzksIDE1MDAwMDAwMDAwMDBdLCAgWzMsIDE1MDAwMDAwMDEwMDBdLCBbNCwgMTUwMDAwMDAwMjAwMF0sIFs4LCAxNTAwMDAwMDAzMDAwXV0sXG4gICAgXTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ1doZW4gYXBwbHkgZ3JvdXBCeSgpIGZ1bmN0aW9ucycsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIHJldHVybiBzZXJpZXMgYXZlcmFnZScsICgpID0+IHtcbiAgICAgIGxldCBhZ2dyZWdhdGVCeSA9IGRhdGFQcm9jZXNzb3IubWV0cmljRnVuY3Rpb25zWydncm91cEJ5J107XG4gICAgICBjb25zdCBhdmcycyA9IF8ubWFwKGN0eC5kYXRhcG9pbnRzLCAoZHApID0+IGFnZ3JlZ2F0ZUJ5KCcycycsICdhdmcnLCBkcCkpO1xuICAgICAgZXhwZWN0KGF2ZzJzKS50b0VxdWFsKFtcbiAgICAgICAgW1s2LCAxNTAwMDAwMDAwMDAwXSwgWzQsIDE1MDAwMDAwMDIwMDBdXSxcbiAgICAgICAgW1s2LCAxNTAwMDAwMDAwMDAwXSwgWzYsIDE1MDAwMDAwMDIwMDBdXSxcbiAgICAgIF0pO1xuXG4gICAgICBjb25zdCBhdmcxMHMgPSBfLm1hcChjdHguZGF0YXBvaW50cywgKGRwKSA9PiBhZ2dyZWdhdGVCeSgnMTBzJywgJ2F2ZycsIGRwKSk7XG4gICAgICBleHBlY3QoYXZnMTBzKS50b0VxdWFsKFtcbiAgICAgICAgW1s1LCAxNTAwMDAwMDAwMDAwXV0sXG4gICAgICAgIFtbNiwgMTUwMDAwMDAwMDAwMF1dLFxuICAgICAgXSk7XG5cbiAgICAgIC8vIG5vdCBhbGlnbmVkXG4gICAgICBjb25zdCBkcCA9IFtbMTAsIDE1MDAwMDAwMDEwMDBdLCBbMiwgMTUwMDAwMDAwMjAwMF0sIFs3LCAxNTAwMDAwMDAzMDAwXSwgWzEsIDE1MDAwMDAwMDQwMDBdXTtcbiAgICAgIGV4cGVjdChhZ2dyZWdhdGVCeSgnMnMnLCAnYXZnJywgZHApKS50b0VxdWFsKFtcbiAgICAgICAgWzEwLCAxNTAwMDAwMDAwMDAwXSwgWzQuNSwgMTUwMDAwMDAwMjAwMF0sIFsxLCAxNTAwMDAwMDA0MDAwXVxuICAgICAgXSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdXaGVuIGFwcGx5IGFnZ3JlZ2F0ZUJ5KCkgZnVuY3Rpb25zJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgcmV0dXJuIHNlcmllcyBhdmVyYWdlJywgKCkgPT4ge1xuICAgICAgbGV0IGFnZ3JlZ2F0ZUJ5ID0gZGF0YVByb2Nlc3Nvci5tZXRyaWNGdW5jdGlvbnNbJ2FnZ3JlZ2F0ZUJ5J107XG4gICAgICBjb25zdCBhdmcxcyA9IGFnZ3JlZ2F0ZUJ5KCcxcycsICdhdmcnLCBjdHguZGF0YXBvaW50cyk7XG4gICAgICBleHBlY3QoYXZnMXMpLnRvRXF1YWwoW1xuICAgICAgICBbOS41LCAxNTAwMDAwMDAwMDAwXSwgWzIuNSwgMTUwMDAwMDAwMTAwMF0sIFs1LjUsIDE1MDAwMDAwMDIwMDBdLCBbNC41LCAxNTAwMDAwMDAzMDAwXVxuICAgICAgXSk7XG5cbiAgICAgIGNvbnN0IGF2ZzEwcyA9IGFnZ3JlZ2F0ZUJ5KCcxMHMnLCAnYXZnJywgY3R4LmRhdGFwb2ludHMpO1xuICAgICAgZXhwZWN0KGF2ZzEwcykudG9FcXVhbChbXG4gICAgICAgIFs1LjUsIDE1MDAwMDAwMDAwMDBdXG4gICAgICBdKTtcbiAgICB9KTtcbiAgfSk7XG59KTtcbiJdfQ==