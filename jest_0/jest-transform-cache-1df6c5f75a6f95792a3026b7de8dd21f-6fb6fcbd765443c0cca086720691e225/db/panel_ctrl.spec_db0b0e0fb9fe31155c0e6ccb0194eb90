707c7a7d8b2f2540e549eb5886eda081
'use strict';var _lodash = require('lodash');var _lodash2 = _interopRequireDefault(_lodash);
var _triggers_panel_ctrl = require('../triggers_panel_ctrl');function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

// import { create } from 'domain';

describe('TriggerPanelCtrl', function () {
  var ctx = {};
  var datasourceSrvMock = void 0,zabbixDSMock = void 0;
  var timeoutMock = function timeoutMock() {};
  var createPanelCtrl = void 0;

  beforeEach(function () {
    ctx = { scope: { panel: _triggers_panel_ctrl.PANEL_DEFAULTS } };
    zabbixDSMock = {
      replaceTemplateVars: function replaceTemplateVars() {},
      zabbix: {
        getTriggers: jest.fn().mockReturnValue([generateTrigger("1"), generateTrigger("1")]),
        getAcknowledges: jest.fn().mockReturnValue(Promise.resolve([])) } };



    datasourceSrvMock = {
      getMetricSources: function getMetricSources() {
        return [
        { meta: { id: 'alexanderzobnin-zabbix-datasource' }, value: {}, name: 'zabbix_default' },
        { meta: { id: 'alexanderzobnin-zabbix-datasource' }, value: {}, name: 'zabbix' },
        { meta: { id: 'graphite' }, value: {}, name: 'graphite' }];

      },
      get: function get() {return Promise.resolve(zabbixDSMock);} };

    createPanelCtrl = function createPanelCtrl() {return new _triggers_panel_ctrl.TriggerPanelCtrl(ctx.scope, {}, timeoutMock, datasourceSrvMock, {}, {}, {});};

    var getTriggersResp = [
    [
    createTrigger({
      triggerid: "1", lastchange: "1510000010", priority: 5, lastEvent: { eventid: "11" }, hosts: [{ maintenance_status: '1' }] }),

    createTrigger({
      triggerid: "2", lastchange: "1510000040", priority: 3, lastEvent: { eventid: "12" } })],


    [
    createTrigger({ triggerid: "3", lastchange: "1510000020", priority: 4, lastEvent: { eventid: "13" } }),
    createTrigger({ triggerid: "4", lastchange: "1510000030", priority: 2, lastEvent: { eventid: "14" } })]];



    // Simulate 2 data sources
    zabbixDSMock.zabbix.getTriggers = jest.fn().
    mockReturnValueOnce(getTriggersResp[0]).
    mockReturnValueOnce(getTriggersResp[1]);
    zabbixDSMock.zabbix.getAcknowledges = jest.fn().
    mockReturnValue(Promise.resolve([defaultEvent]));

    ctx.panelCtrl = createPanelCtrl();
  });

  describe('When adding new panel', function () {
    it('should suggest all zabbix data sources', function () {
      ctx.scope.panel = {};
      var panelCtrl = createPanelCtrl();
      expect(panelCtrl.available_datasources).toEqual([
      'zabbix_default', 'zabbix']);

    });

    it('should load first zabbix data source as default', function () {
      ctx.scope.panel = {};
      var panelCtrl = createPanelCtrl();
      expect(panelCtrl.panel.datasources).toEqual([
      'zabbix_default']);

    });
  });

  describe('When refreshing panel', function () {
    beforeEach(function () {
      ctx.scope.panel.datasources = ['zabbix_default', 'zabbix'];
      ctx.scope.panel.targets = {
        'zabbix_default': _triggers_panel_ctrl.DEFAULT_TARGET,
        'zabbix': _triggers_panel_ctrl.DEFAULT_TARGET };

      ctx.panelCtrl = createPanelCtrl();
    });

    it('should format triggers', function (done) {
      ctx.panelCtrl.onRefresh().then(function () {
        var formattedTrigger = _lodash2.default.find(ctx.panelCtrl.triggerList, { triggerid: "1" });
        expect(formattedTrigger.host).toBe('backend01');
        expect(formattedTrigger.hostTechName).toBe('backend01_tech');
        expect(formattedTrigger.datasource).toBe('zabbix_default');
        expect(formattedTrigger.severity).toBe('Disaster');
        expect(formattedTrigger.maintenance).toBe(true);
        expect(formattedTrigger.age).toBeTruthy();
        expect(formattedTrigger.lastchange).toBeTruthy();
        done();
      });
    });

    it('should sort triggers by time by default', function (done) {
      ctx.panelCtrl.onRefresh().then(function () {
        var trigger_ids = _lodash2.default.map(ctx.panelCtrl.triggerList, 'triggerid');
        expect(trigger_ids).toEqual([
        '2', '4', '3', '1']);

        done();
      });
    });

    it('should sort triggers by severity', function (done) {
      ctx.panelCtrl.panel.sortTriggersBy = { text: 'severity', value: 'priority' };
      ctx.panelCtrl.onRefresh().then(function () {
        var trigger_ids = _lodash2.default.map(ctx.panelCtrl.triggerList, 'triggerid');
        expect(trigger_ids).toEqual([
        '1', '3', '2', '4']);

        done();
      });
    });

    it('should add acknowledges to trigger', function (done) {
      ctx.panelCtrl.onRefresh().then(function () {
        var trigger = getTriggerById(1, ctx);
        expect(trigger.acknowledges).toHaveLength(1);
        expect(trigger.acknowledges[0].message).toBe("event ack");

        expect(getTriggerById(2, ctx).acknowledges).toBe(undefined);
        expect(getTriggerById(3, ctx).acknowledges).toBe(undefined);
        expect(getTriggerById(4, ctx).acknowledges).toBe(undefined);
        done();
      });
    });
  });

  describe('When formatting triggers', function () {
    beforeEach(function () {
      ctx.panelCtrl = createPanelCtrl();
    });

    it('should handle new lines in trigger description', function () {
      ctx.panelCtrl.setTriggerSeverity = jest.fn(function (trigger) {return trigger;});
      var trigger = { comments: "this is\ndescription" };
      var formattedTrigger = ctx.panelCtrl.formatTrigger(trigger);
      expect(formattedTrigger.comments).toBe("this is<br>description");
    });

    it('should format host name to display (default)', function (done) {
      ctx.panelCtrl.onRefresh().then(function () {
        var trigger = getTriggerById(1, ctx);
        var hostname = ctx.panelCtrl.formatHostName(trigger);
        expect(hostname).toBe('backend01');
        done();
      });
    });

    it('should format host name to display (tech name)', function (done) {
      ctx.panelCtrl.panel.hostField = false;
      ctx.panelCtrl.panel.hostTechNameField = true;
      ctx.panelCtrl.onRefresh().then(function () {
        var trigger = getTriggerById(1, ctx);
        var hostname = ctx.panelCtrl.formatHostName(trigger);
        expect(hostname).toBe('backend01_tech');
        done();
      });
    });

    it('should format host name to display (both tech and visible)', function (done) {
      ctx.panelCtrl.panel.hostField = true;
      ctx.panelCtrl.panel.hostTechNameField = true;
      ctx.panelCtrl.onRefresh().then(function () {
        var trigger = getTriggerById(1, ctx);
        var hostname = ctx.panelCtrl.formatHostName(trigger);
        expect(hostname).toBe('backend01 (backend01_tech)');
        done();
      });
    });

    it('should hide hostname if both visible and tech name checkboxes unset', function (done) {
      ctx.panelCtrl.panel.hostField = false;
      ctx.panelCtrl.panel.hostTechNameField = false;
      ctx.panelCtrl.onRefresh().then(function () {
        var trigger = getTriggerById(1, ctx);
        var hostname = ctx.panelCtrl.formatHostName(trigger);
        expect(hostname).toBe("");
        done();
      });
    });
  });

  describe('When formatting acknowledges', function () {
    beforeEach(function () {
      ctx.panelCtrl = createPanelCtrl();
    });

    it('should build proper user name', function () {
      var ack = {
        alias: 'alias', name: 'name', surname: 'surname' };


      var formatted = ctx.panelCtrl.formatAcknowledge(ack);
      expect(formatted.user).toBe('alias (name surname)');
    });

    it('should return empty name if it is not defined', function () {
      var formatted = ctx.panelCtrl.formatAcknowledge({});
      expect(formatted.user).toBe('');
    });
  });
});

var defaultTrigger = {
  "triggerid": "13565",
  "value": "1",
  "groups": [{ "groupid": "1", "name": "Backend" }],
  "hosts": [{ "host": "backend01_tech", "hostid": "10001", "maintenance_status": "0", "name": "backend01" }],
  "lastEvent": {
    "eventid": "11",
    "clock": "1507229064",
    "ns": "556202037",
    "acknowledged": "1",
    "value": "1",
    "object": "0",
    "source": "0",
    "objectid": "13565" },

  "tags": [],
  "lastchange": "1440259530",
  "priority": "2",
  "description": "Lack of free swap space on server",
  "comments": "It probably means that the systems requires\nmore physical memory.",
  "url": "https://host.local/path",
  "templateid": "0", "expression": "{13174}<50", "manual_close": "0", "correlation_mode": "0",
  "correlation_tag": "", "recovery_mode": "0", "recovery_expression": "", "state": "0", "status": "0",
  "flags": "0", "type": "0", "items": [], "error": "" };


var defaultEvent = {
  "eventid": "11",
  "acknowledges": [
  {
    "acknowledgeid": "185",
    "action": "0",
    "alias": "api",
    "clock": "1512382246",
    "eventid": "11",
    "message": "event ack",
    "name": "api",
    "surname": "user",
    "userid": "3" }],


  "clock": "1507229064",
  "ns": "556202037",
  "acknowledged": "1",
  "value": "1",
  "object": "0",
  "source": "0",
  "objectid": "1" };


function generateTrigger(id, timestamp, severity) {
  var trigger = _lodash2.default.cloneDeep(defaultTrigger);
  trigger.triggerid = id.toString();
  if (severity) {
    trigger.priority = severity.toString();
  }
  if (timestamp) {
    trigger.lastchange = timestamp;
  }
  return trigger;
}

function createTrigger(props) {
  var trigger = _lodash2.default.cloneDeep(defaultTrigger);
  trigger = _lodash2.default.merge(trigger, props);
  trigger.lastEvent.objectid = trigger.triggerid;
  return trigger;
}

function getTriggerById(id, ctx) {
  return _lodash2.default.find(ctx.panelCtrl.triggerList, { triggerid: id.toString() });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,