d3421f54366afcdbe59337db891955f5
'use strict';Object.defineProperty(exports, "__esModule", { value: true });var _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();exports.



































































































triggerPanelTriggersTab = triggerPanelTriggersTab;var _lodash = require('lodash');var _lodash2 = _interopRequireDefault(_lodash);var _utils = require('../datasource-zabbix/utils');var utils = _interopRequireWildcard(_utils);var _triggers_panel_ctrl = require('./triggers_panel_ctrl');function _interopRequireWildcard(obj) {if (obj && obj.__esModule) {return obj;} else {var newObj = {};if (obj != null) {for (var key in obj) {if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];}}newObj.default = obj;return newObj;}}function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}var TriggersTabCtrl = function () {/** @ngInject */function TriggersTabCtrl($scope, $rootScope, uiSegmentSrv, templateSrv) {_classCallCheck(this, TriggersTabCtrl);$scope.editor = this;this.panelCtrl = $scope.ctrl;this.panel = this.panelCtrl.panel;this.templateSrv = templateSrv;this.datasources = this.panelCtrl.datasources; // Load scope defaults
    var scopeDefaults = { getGroupNames: {}, getHostNames: {}, getApplicationNames: {}, oldTarget: _lodash2.default.cloneDeep(this.panel.targets) };_lodash2.default.defaultsDeep(this, scopeDefaults);this.initDatasources();this.panelCtrl.refresh();}_createClass(TriggersTabCtrl, [{ key: 'initDatasources', value: function initDatasources() {var _this = this;return this.panelCtrl.initDatasources().then(function (datasources) {_lodash2.default.each(datasources, function (datasource) {_this.bindSuggestionFunctions(datasource);});});} }, { key: 'bindSuggestionFunctions', value: function bindSuggestionFunctions(datasource) {// Map functions for bs-typeahead
      var ds = datasource.name;this.getGroupNames[ds] = _lodash2.default.bind(this.suggestGroups, this, datasource);this.getHostNames[ds] = _lodash2.default.bind(this.suggestHosts, this, datasource);this.getApplicationNames[ds] = _lodash2.default.bind(this.suggestApps, this, datasource);} }, { key: 'suggestGroups', value: function suggestGroups(datasource, query, callback) {return datasource.zabbix.getAllGroups().then(function (groups) {return _lodash2.default.map(groups, 'name');}).then(callback);} }, { key: 'suggestHosts', value: function suggestHosts(datasource, query, callback) {var groupFilter = datasource.replaceTemplateVars(this.panel.targets[datasource.name].group.filter);return datasource.zabbix.getAllHosts(groupFilter).then(function (hosts) {return _lodash2.default.map(hosts, 'name');}).then(callback);} }, { key: 'suggestApps', value: function suggestApps(datasource, query, callback) {var groupFilter = datasource.replaceTemplateVars(this.panel.targets[datasource.name].group.filter);var hostFilter = datasource.replaceTemplateVars(this.panel.targets[datasource.name].host.filter);return datasource.zabbix.getAllApps(groupFilter, hostFilter).then(function (apps) {return _lodash2.default.map(apps, 'name');}).then(callback);} }, { key: 'datasourcesChanged', value: function datasourcesChanged() {var _this2 = this;_lodash2.default.each(this.panel.datasources, function (ds) {if (!_this2.panel.targets[ds]) {_this2.panel.targets[ds] = _lodash2.default.cloneDeep(_triggers_panel_ctrl.DEFAULT_TARGET);}});this.parseTarget();} }, { key: 'parseTarget', value: function parseTarget() {var _this3 = this;this.initDatasources().then(function () {var newTarget = _lodash2.default.cloneDeep(_this3.panel.targets);if (!_lodash2.default.isEqual(_this3.oldTarget, newTarget)) {_this3.oldTarget = newTarget;}_this3.panelCtrl.refresh();});} }, { key: 'isRegex', value: function isRegex(str) {return utils.isRegex(str);} }, { key: 'isVariable', value: function isVariable(str) {return utils.isTemplateVariable(str, this.templateSrv.variables);} }]);return TriggersTabCtrl;}();function triggerPanelTriggersTab() {return { restrict: 'E',
    scope: true,
    templateUrl: 'public/plugins/alexanderzobnin-zabbix-app/panel-triggers/partials/triggers_tab.html',
    controller: TriggersTabCtrl };

}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,